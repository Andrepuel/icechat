//! `SeaORM` Entity. Generated by sea-orm-codegen 0.11.0

use sea_orm::entity::prelude::*;

#[derive(Clone, Debug, PartialEq, DeriveEntityModel, Eq)]
#[sea_orm(table_name = "contact")]
pub struct Model {
    #[sea_orm(primary_key, auto_increment = false)]
    pub key: i32,
    pub name: String,
    pub crdt_generation: i32,
    pub crdt_author: i32,
}

#[derive(Copy, Clone, Debug, EnumIter, DeriveRelation)]
pub enum Relation {
    #[sea_orm(
        belongs_to = "super::key::Entity",
        from = "Column::Key",
        to = "super::key::Column::Id",
        on_update = "NoAction",
        on_delete = "Cascade"
    )]
    Key,
    #[sea_orm(has_many = "super::message::Entity")]
    Message,
}

impl Related<super::key::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Key.def()
    }
}

impl Related<super::message::Entity> for Entity {
    fn to() -> RelationDef {
        Relation::Message.def()
    }
}

impl Related<super::conversation::Entity> for Entity {
    fn to() -> RelationDef {
        super::member::Relation::Conversation.def()
    }
    fn via() -> Option<RelationDef> {
        Some(super::member::Relation::Contact.def().rev())
    }
}

impl ActiveModelBehavior for ActiveModel {}
